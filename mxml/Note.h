#ifndef NOTE_H
#define NOTE_H
#include "Element.h"
#include "XPosition.h"
#include "Font.h"
#include "Color.h"
#include "Printout.h"

namespace mxml
{
  class Grace;
  using GracePtr = std::shared_ptr<Grace>;
  class Cue;
  using CuePtr = std::shared_ptr<Cue>;
  class Chord;
  using ChordPtr = std::shared_ptr<Chord>;
  class Pitch;
  using PitchPtr = std::shared_ptr<Pitch>;
  class Unpitched;
  using UnpitchedPtr = std::shared_ptr<Unpitched>;
  class Rest;
  using RestPtr = std::shared_ptr<Rest>;
  class Tie;
  using TiePtr = std::shared_ptr<Tie>;
  using TieSet = std::vector<TiePtr>;
  class Duration;
  using DurationPtr = std::shared_ptr<Duration>;
  class Instrument;
  using InstrumentPtr = std::shared_ptr<Instrument>;
  class Footnote;
  using FootnotePtr = std::shared_ptr<Footnote>;
  class Level;
  using LevelPtr = std::shared_ptr<Level>;
  class Voice;
  using VoicePtr = std::shared_ptr<Voice>;
  class Type;
  using TypePtr = std::shared_ptr<Type>;
  class Dot;
  using DotPtr = std::shared_ptr<Dot>;
  using DotSet = std::vector<DotPtr>;
  class Accidental;
  using AccidentalPtr = std::shared_ptr<Accidental>;
  class TimeModification;
  using TimeModificationPtr = std::shared_ptr<TimeModification>;
  class Stem;
  using StemPtr = std::shared_ptr<Stem>;
  class Notehead;
  using NoteheadPtr = std::shared_ptr<Notehead>;
  class NoteheadText;
  using NoteheadTextPtr = std::shared_ptr<NoteheadText>;
  class Staff;
  using StaffPtr = std::shared_ptr<Staff>;
  class Beam;
  using BeamPtr = std::shared_ptr<Beam>;
  using BeamSet = std::vector<BeamPtr>;
  class Notations;
  using NotationsPtr = std::shared_ptr<Notations>;
  using NotationsSet = std::vector<NotationsPtr>;
  class Lyric;
  using LyricPtr = std::shared_ptr<Lyric>;
  using LyricSet = std::vector<LyricPtr>;  
  using Play = Element;
  using PlayPtr = std::shared_ptr<Play>;
  using PlaySet = std::vector<PlayPtr>;

  class Note: public Element, public XPosition, public Font, public Color, public Printout
  {
  public:
    Note();
    virtual const char* tagname() const { return "note"; }
    GracePtr getGrace() const;
    void setGrace(const GracePtr& value);
    CuePtr getCue() const;
    void setCue(const CuePtr& value);
    ChordPtr getChord() const;
    void setChord(const ChordPtr& value);
    PitchPtr getPitch() const;
    void setPitch(const PitchPtr& value);
    UnpitchedPtr getUnpitched() const;
    void setUnpitched(const UnpitchedPtr& value);
    RestPtr getRest() const;
    void setRest(const RestPtr& value);
    const TieSet& getTieSet() const;
    void removeTie(const TiePtr& value);
    void addTie(const TiePtr& value);
    void clearTieSet();
    DurationPtr getDuration() const;
    void setDuration(const DurationPtr& value);
    InstrumentPtr getInstrument() const;
    void setInstrument(const InstrumentPtr& value);
    FootnotePtr getFootnote() const;
    void setFootnote(const FootnotePtr& value);
    LevelPtr getLevel() const;
    void setLevel(const LevelPtr& value);
    VoicePtr getVoice() const;
    void setVoice(const VoicePtr& value);
    TypePtr getType() const;
    void setType(const TypePtr& value);
    const DotSet& getDotSet() const;
    void removeDot(const DotPtr& value);
    void addDot(const DotPtr& value);
    void clearDotSet();
    AccidentalPtr getAccidental() const;
    void setAccidental(const AccidentalPtr& value);
    TimeModificationPtr getTimeModification() const;
    void setTimeModification(const TimeModificationPtr& value);
    StemPtr getStem() const;
    void setStem(const StemPtr& value);
    NoteheadPtr getNotehead() const;
    void setNotehead(const NoteheadPtr& value);
    NoteheadTextPtr getNoteheadText() const;
    void setNoteheadText(const NoteheadTextPtr& value);
    StaffPtr getStaff() const;
    void setStaff(const StaffPtr& value);
    const BeamSet& getBeamSet() const;
    void removeBeam(const BeamPtr& value);
    void addBeam(const BeamPtr& value);
    void clearBeamSet();
    const NotationsSet& getNotationsSet() const;
    void removeNotations(const NotationsPtr& value);
    void addNotations(const NotationsPtr& value);
    void clearNotationsSet();
    const LyricSet& getLyricSet() const;
    void removeLyric(const LyricPtr& value);
    void addLyric(const LyricPtr& value);
    void clearLyricSet();
    const PlaySet& getPlaySet() const;
    void removePlay(const PlayPtr& value);
    void addPlay(const PlayPtr& value);
    void clearPlaySet();
    bool hasDynamics() const;
    void hasDynamics(bool value);
    float dynamics() const;
    void dynamics(float value);
    bool hasEndDynamics() const;
    void hasEndDynamics(bool value);
    float endDynamics() const;
    void endDynamics(float value);
    bool hasAttack() const;
    void hasAttack(bool value);
    float attack() const;
    void attack(float value);
    bool hasRelease() const;
    void hasRelease(bool value);
    float release() const;
    void release(float value);
    bool hasTimeOnly() const;
    void hasTimeOnly(bool value);
    std::string timeOnly() const;
    void timeOnly(std::string value);
    bool hasPizzicato() const;
    void hasPizzicato(bool value);
    YesNoEnum pizzicato() const;
    void pizzicato(YesNoEnum value);
    bool hasPlayId() const;
    void hasPlayId(bool value);
    std::string playId() const;
    void playId(std::string value);
  protected:
    virtual void ostreamAttrs(pugi::xml_node& self) const;
    virtual void istreamAttrs(const pugi::xml_node& self);
    virtual void ostreamContents(pugi::xml_node& self) const;
    virtual void istreamContents(const pugi::xml_node& self);
    GracePtr _gracePtr;
    CuePtr _cuePtr;
    ChordPtr _chordPtr;
    PitchPtr _pitchPtr;
    UnpitchedPtr _unpitchedPtr;
    RestPtr _restPtr;
    TieSet _tieSet;
    DurationPtr _durationPtr;
    InstrumentPtr _instrumentPtr;
    FootnotePtr _footnotePtr;
    LevelPtr _levelPtr;
    VoicePtr _voicePtr;
    TypePtr _typePtr;
    DotSet _dotSet;
    AccidentalPtr _accidentalPtr;
    TimeModificationPtr _timeModificationPtr;
    StemPtr _stemPtr;
    NoteheadPtr _noteheadPtr;
    NoteheadTextPtr _noteheadTextPtr;
    StaffPtr _staffPtr;
    BeamSet _beamSet;
    NotationsSet _notationsSet;
    LyricSet _lyricSet;
    PlaySet _playSet;
    bool _hasDynamics {false};
    float _dynamics;
    bool _hasEndDynamics {false};
    float _endDynamics;
    bool _hasAttack {false};
    float _attack;
    bool _hasRelease {false};
    float _release;
    bool _hasTimeOnly {false};
    std::string _timeOnly;
    bool _hasPizzicato {false};
    YesNoEnum _pizzicato;
    bool _hasPlayId {false};
    std::string _playId;
  };
}
#endif //NOTE_H
